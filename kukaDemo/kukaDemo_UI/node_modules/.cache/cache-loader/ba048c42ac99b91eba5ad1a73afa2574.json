{"remainingRequest":"/Users/winneberger/Mindchains/LastMile/lastmile/last-mile-ui/node_modules/babel-loader/lib/index.js!/Users/winneberger/Mindchains/LastMile/lastmile/last-mile-ui/node_modules/vue-loader/lib/selector.js?type=script&index=0!/Users/winneberger/Mindchains/LastMile/lastmile/last-mile-ui/src/App.vue","dependencies":[{"path":"/Users/winneberger/Mindchains/LastMile/lastmile/last-mile-ui/src/App.vue","mtime":1536136150231},{"path":"/Users/winneberger/Mindchains/LastMile/lastmile/last-mile-ui/package.json","mtime":1522078632094},{"path":"/Users/winneberger/Mindchains/LastMile/lastmile/last-mile-ui/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/winneberger/Mindchains/LastMile/lastmile/last-mile-ui/node_modules/babel-loader/lib/index.js","mtime":1519636541000},{"path":"/Users/winneberger/Mindchains/LastMile/lastmile/last-mile-ui/node_modules/vue-loader/lib/selector.js","mtime":1520395331000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport ShippingProgress from './components/ShippingProgress.vue';\nimport io from 'socket.io-client';\nexport default {\n  name: 'app',\n  components: {\n    ShippingProgress: ShippingProgress\n  },\n  data: function data() {\n    return {\n      fake_blockchain: false,\n      transaction_in_progress: null,\n      contract: {\n        address: null,\n        steps: [{\n          timestamp: null,\n          text: 'Order placed'\n        }, {\n          timestamp: null,\n          text: 'Delivery service selected'\n        }, {\n          timestamp: null,\n          text: 'Parcel code registered'\n        }, {\n          timestamp: null,\n          text: 'Delivery'\n        }, {\n          timestamp: null,\n          text: 'Delivery service on site'\n        }, {\n          timestamp: null,\n          text: 'Parcel delivered'\n        }]\n      },\n      socket: io()\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    console.log('mounted');\n    var vm = this; // debug: for the walk-through method\n\n    this.socket.on('data', function (data) {\n      _this.transaction_in_progress = null;\n      console.log('received data ' + JSON.stringify(data)); // advance the state of the application\n      // FAKE: adjust this to production requirements\n      // maybe it should be a trigger for query the state on the blockchain directly!\n\n      vm.fake_completed(data.step, new Date()); // this.fake_completed(data.step, Date.parse(data.timestamp));\n    });\n    this.socket.on('new contract', function (contract) {\n      _this.transaction_in_progress = null;\n      console.log('new contract deployed ' + contract.address);\n\n      if (contract && contract.address) {\n        vm.reset();\n        vm.contract.address = contract.address;\n      } else {\n        console.error('Ignoring new and imcomplete contract');\n      }\n    });\n    this.socket.on('status changed', function (contract) {\n      console.log('status changed ' + contract.address);\n      _this.transaction_in_progress = null;\n\n      if (contract && contract.address && vm.contract.address == contract.address) {\n        var d = new Date();\n        d.setTime(contract.timestamp);\n        vm.fake_completed(contract.step, d);\n      } else {\n        console.error('Ignoring status update with wrong contract address');\n      }\n    });\n    this.socket.on('ACK', function (msg) {\n      console.log('ACK ' + msg);\n      _this.transaction_in_progress = msg;\n    });\n  },\n  methods: {\n    emit: function emit(event, data, callback) {\n      console.log('emit :' + event);\n\n      if (!this.transaction_in_progress) {\n        this.transaction_in_progress = \"submitted \" + event;\n        return this.socket.emit(event, data, callback);\n      }\n    },\n    advance: function advance() {\n      console.log('advance');\n      var i = 0;\n\n      for (; i < this.contract.steps.length; i++) {\n        if (!this.contract.steps[i].timestamp) break;\n      }\n\n      this.emit('advance', i, function (data) {\n        console.log(data);\n      });\n    },\n    order: function order() {\n      console.log('place order');\n      this.emit('place order', null, function (data) {\n        console.log(data);\n      });\n    },\n    ready_to_accept: function ready_to_accept() {\n      return this.contract.steps.slice(0, -1).reduce(function (acc, s) {\n        return acc && s.timestamp;\n      }, true) && !this.contract.steps[this.contract.steps.length - 1].timestamp;\n    },\n    accept: function accept() {\n      console.log('accept order');\n\n      if (this.ready_to_accept()) {\n        this.emit('advance', this.contract.steps.length - 1, function (data) {\n          console.log(data);\n        });\n      }\n    },\n    reset: function reset() {\n      this.fake_completed(0, null);\n    },\n    fake_completed: function fake_completed(idx, timestamp) {\n      if (idx < 0 || idx >= this.contract.steps.length) {\n        throw 'ignoring illegal idx ' + idx;\n      }\n\n      if (idx === 0 && this.contract.steps[idx].timestamp) {\n        console.log('reseting status');\n        this.contract.address = null;\n\n        for (var i = 0; i < this.contract.steps.length; i = i + 1) {\n          this.contract.steps[i].timestamp = null;\n          this.contract.steps[i].action = null;\n        }\n\n        return;\n      }\n\n      if (idx > 0 && this.contract.steps[idx - 1].timestamp === null) {\n        throw 'ignoring update of idx ' + idx + ', complete the previous entry first';\n      }\n\n      if (this.contract.steps[idx].timestamp !== null) {\n        throw 'ignoring update of idx ' + idx + ', already up to date';\n      }\n\n      this.contract.steps[idx].timestamp = timestamp;\n\n      if (idx === 0) {\n        console.log('updating action');\n        this.contract.steps[idx].action = 'fa fa-shopping-cart';\n      } else if (idx === 1) {\n        this.contract.steps[idx].action = 'fa fa-search';\n      } else if (idx === 2) {\n        this.contract.steps[idx].action = 'fa fa-tag';\n      } else if (idx === 3) {\n        this.contract.steps[idx].action = 'fa fa-truck';\n      } else if (idx === 4) {\n        this.contract.steps[idx].action = 'fa fa-home';\n      } else if (idx === 5) {\n        this.contract.steps[idx].action = 'fa fa-check';\n      }\n    }\n  }\n};",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;AACA;AAEA;QAEA;;AAEA,AACA;AAFA;wBAGA;;uBAEA;+BACA;;iBAEA;;;gBAEA;SADA;;gBAEA;;;gBACA;;;gBACA;;;gBACA;;;gBACA,AACA,AACA;;AAVA;cAWA,AACA;AAfA;AAgBA;;AACA;;gBACA;aAEA,MACA;;2CACA;sCACA;oDAEA,QACA;AACA;AACA;;uCACA,SACA;AAEA;uDACA;sCACA;sDACA;;wCACA;WACA;uCACA;aACA;sBACA;AACA;AAEA;yDACA;+CACA;sCACA;;mFACA;oBACA;2BACA;yCACA;aACA;sBACA;AACA;AAEA;yCACA;2BACA;sCACA;AACA;AACA;;+CAEA;6BACA;;yCACA;sDACA;6CACA;AACA;AACA;gCACA;kBACA;cACA;;kDACA;oCACA,WACA;AACA;;;;AACA;AACA;4BACA;kBACA;;;AACA;AACA;gDACA;;;SACA,8DACA;AACA;8BACA;kBACA;;kCACA;;;AACA;AACA;AACA;4BACA;6BACA;AACA;4DACA;wDACA;wCACA;AACA;;2DACA;oBACA;gCACA;;mEACA;6CACA;0CACA;AACA;;AACA;AACA;;sEACA;gDACA;AACA;;uDACA;gDACA;AAEA;;2CACA;;qBACA;oBACA;0CACA;4BACA;0CACA;4BACA;0CACA;4BACA;0CACA;4BACA;0CACA;4BACA;0CACA;AACA;AACA,AACA;AAtEA;AAnEA","sourceRoot":"src","sourcesContent":["<template>\n    <div id=\"app container\">\n        <div v-if=\"!contract.address\" class=\"overlay\">\n            <div class=\"white\"></div>\n            <button class=\"btn btn-lg order text-uppercase\" @click.prevent=\"order\">\n                <i v-if=\"!transaction_in_progress\" class=\"fa fa-shopping-cart\"></i>\n                <i v-else class=\"fa fa-spinner fa-spin\"></i>\n                Place order</button>\n        </div>\n        <div v-if=\"ready_to_accept()\" class=\"overlay\">\n            <div class=\"white\"></div>\n            <button class=\"btn btn-lg order text-uppercase\" @click.prevent=\"accept\">\n                <i v-if=\"!transaction_in_progress\" class=\"fa fa-check\"></i>\n                <i v-else class=\"fa fa-spinner fa-spin\"></i>\n                Accpet order</button>\n        </div>\n        <div class=\"row\">\n            <div class=\"col headerL\"><img class=\"logo\" src=\"./assets/chainstep.svg\">\n            <h3 class=\"indentL title\">Reliability on the Last Mile</h3>\n            </div>\n            <div class=\"col headerR\"><img class=\"logo\" src=\"./assets/Mindchains_PB.svg\"></div>\n        </div>\n        <div class=\"row indentL\">\n            <div class=\"col col-sm-3 headerL\">\n                <button v-if=\"contract.steps[0].timestamp\" class=\"btn cancel text-uppercase\" @click.prevent=\"reset\">\n                    <span v-if=\"contract.steps[contract.steps.length-1].timestamp\"><i class=\"fa fa-undo\"></i> Start again</span>\n                    <span v-else><i class=\"fa fa-times\"></i> Cancel</span>\n                </button>\n            </div>\n            \n        </div>\n        <div class=\"row\">\n            <div class=\"col\"><ShippingProgress :steps=\"contract.steps\" @completed=\"fake_completed\" /></div>\n        </div>\n        <div class=\"progress\"v-show=\"transaction_in_progress\" >\n            <button class=\"btn btn-light\">\n                <i class=\"fa fa-spinner fa-spin\"></i> {{ transaction_in_progress }}\n            </button>\n        </div>\n    </div>\n</template>\n\n<script>\nimport ShippingProgress from './components/ShippingProgress.vue';\nimport io from 'socket.io-client';\n\nexport default {\n    name: 'app',\n    components: {\n        ShippingProgress\n    },\n    data: function() {\n        return {\n            fake_blockchain: false,\n            transaction_in_progress: null,\n            contract: {\n                address: null,\n                steps: [\n                    {timestamp: null, text: 'Order placed'},\n                    {timestamp: null, text: 'Delivery service selected'},\n                    {timestamp: null, text: 'Parcel code registered'},\n                    {timestamp: null, text: 'Delivery'},\n                    {timestamp: null, text: 'Delivery service on site'},\n                    {timestamp: null, text: 'Parcel delivered'}\n                ]\n            },\n            socket: io()\n        }\n    },\n    mounted: function() {\n        console.log('mounted');\n        let vm = this;\n\n        // debug: for the walk-through method\n        this.socket.on('data', data => {\n            this.transaction_in_progress = null;\n            console.log('received data ' + JSON.stringify(data));\n\n            // advance the state of the application\n            // FAKE: adjust this to production requirements\n            // maybe it should be a trigger for query the state on the blockchain directly!\n            vm.fake_completed(data.step, new Date());\n            // this.fake_completed(data.step, Date.parse(data.timestamp));\n        });\n\n        this.socket.on('new contract', contract => {\n            this.transaction_in_progress = null;\n            console.log('new contract deployed ' + contract.address);\n            if (contract && contract.address) {\n                vm.reset();\n                vm.contract.address = contract.address;\n            } else {\n                console.error('Ignoring new and imcomplete contract');\n            }\n        });\n\n        this.socket.on('status changed', contract => {\n            console.log('status changed ' + contract.address);\n            this.transaction_in_progress = null;\n            if (contract && contract.address && vm.contract.address == contract.address) {\n                let d = new Date()\n                d.setTime(contract.timestamp)\n                vm.fake_completed(contract.step, d);\n            } else {\n                console.error('Ignoring status update with wrong contract address');\n            }\n        });\n\n        this.socket.on('ACK', msg => {\n            console.log('ACK ' + msg);\n            this.transaction_in_progress = msg;\n        });\n    },\n    methods: {\n        emit: function (event, data, callback) {\n            console.log('emit :' + event);\n            if (!this.transaction_in_progress) {\n                this.transaction_in_progress = \"submitted \" + event;\n                return this.socket.emit(event, data, callback);\n            }\n        },\n        advance: function () {\n            console.log('advance');\n            let i = 0;\n            for (; i < this.contract.steps.length; i++) {\n                if (!this.contract.steps[i].timestamp)\n                    break;\n            }\n            this.emit('advance', i, function(data) { console.log(data) });\n        },\n        order: function () {\n            console.log('place order');\n            this.emit('place order', null, function(data) { console.log(data) });\n        },\n        ready_to_accept: function () {\n            return this.contract.steps.slice(0, -1).reduce((acc, s) => { return acc && s.timestamp }, true)\n                && !this.contract.steps[this.contract.steps.length-1].timestamp\n        },\n        accept: function () {\n            console.log('accept order');\n            if (this.ready_to_accept()) {\n                this.emit('advance', this.contract.steps.length - 1, function(data) { console.log(data) });\n            }\n        },\n        reset: function () {\n            this.fake_completed(0, null);\n        },\n        fake_completed: function (idx, timestamp) {\n            if (idx < 0 || idx >= this.contract.steps.length) {\n                throw('ignoring illegal idx ' + idx);\n            }\n            if (idx === 0 && this.contract.steps[idx].timestamp) {\n                console.log('reseting status');\n                this.contract.address = null;\n                for (let i=0; i < this.contract.steps.length; i=i+1) {\n                    this.contract.steps[i].timestamp = null;\n                    this.contract.steps[i].action = null;\n                }\n                return;\n            }\n            if (idx > 0 && this.contract.steps[idx-1].timestamp === null) {\n                throw('ignoring update of idx ' + idx + ', complete the previous entry first');\n            }\n            if (this.contract.steps[idx].timestamp !== null) {\n                throw('ignoring update of idx ' + idx + ', already up to date');\n            }\n\n            this.contract.steps[idx].timestamp = timestamp;\n            if (idx === 0) {\n                console.log('updating action');\n                this.contract.steps[idx].action = 'fa fa-shopping-cart';\n            } else if (idx === 1) {\n                this.contract.steps[idx].action = 'fa fa-search';\n            } else if (idx === 2) {\n                this.contract.steps[idx].action = 'fa fa-tag';\n            } else if (idx === 3) {\n                this.contract.steps[idx].action = 'fa fa-truck';\n            } else if (idx === 4) {\n                this.contract.steps[idx].action = 'fa fa-home';\n            } else if (idx === 5) {\n                this.contract.steps[idx].action = 'fa fa-check';\n            }\n        }\n    }\n}\n</script>\n\n<style>\n@import url('~bootstrap/dist/css/bootstrap.min.css');\n@import url('./assets/arcon.css');\n\n:root {\n    --font-family-sans-serif: -apple-system,'Arcon',BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\";\n    --bubble-line-height: 1.5;\n    --bubble-font-size: 1.2rem;\n    --bubble-font-size-time: 1rem;\n    --bubble-icon-size: 1.3rem;\n    --bubble-size: 5rem;\n    --bubble-line-top: 2.5rem;\n    --chainstep-blue: #122f5f;\n    --chainstep-light-blue: #4387a9;\n    --chainstep-grey20: #c8c8c8;\n}\n\n.title {\n  padding-top: 1rem;\n}\n\n.indentL {\n  padding-left: 1rem;\n}\n\n.headerR  {\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end;\n    text-align: right;\n    vertical-align: bottom;\n}\n\n.btn.cancel, .btn.order {\n    color: white;\n    background-color: var(--chainstep-blue);\n}\n\n.white {\n    opacity: 0.60;\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    background-color: white;\n}\n\n.overlay {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    z-index: 100;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    top: 0;\n    left: 0;\n}\n\n.progress {\n    width: 100%;\n    position: absolute;\n    z-index: 1000;\n    justify-content: center;\n    align-items: center;\n    bottom: 0;\n    left: 0;\n    padding: 1.4rem;\n}\n\n.btn.order {\n    z-index: 1000;\n    font-size: 270%;\n}\n\n@media (max-width: 991.98px) {\n    :root {\n        --bubble-size: 3rem;\n        --bubble-line-top: 1.5rem;\n    }\n\n    .headerL, .headerR {\n        padding-bottom: 2rem;\n    }\n\n    .logo {\n        width: 90%;\n    }\n\n    .headerR .logo {\n        width: 45%;\n        margin-left: 0.3rem;\n        margin-bottom: 0.5rem;\n    }\n}\n\n@media (min-width: 992px) {\n    .headerL, .headerR  {\n        padding-bottom: 4rem;\n    }\n\n    .logo {\n        width: 80%;\n    }\n\n    .headerR .logo {\n        width: 30%;\n        margin-left: 1rem;\n        margin-bottom: 0.5rem;\n    }\n}\n\n\n#app {\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\nbody {\n    padding: 2rem 2rem 0 2rem;\n    color: var(--chainstep-blue);\n    font-family: var(--font-family-sans-serif);\n}\n\n</style>\n"]}]}